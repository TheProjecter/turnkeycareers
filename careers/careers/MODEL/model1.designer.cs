#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace careers.MODEL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="careersDb")]
	public partial class ModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertBasicEdu(BasicEdu instance);
    partial void UpdateBasicEdu(BasicEdu instance);
    partial void DeleteBasicEdu(BasicEdu instance);
    partial void InsertBasicEduSubject(BasicEduSubject instance);
    partial void UpdateBasicEduSubject(BasicEduSubject instance);
    partial void DeleteBasicEduSubject(BasicEduSubject instance);
    partial void InsertHigherEducation(HigherEducation instance);
    partial void UpdateHigherEducation(HigherEducation instance);
    partial void DeleteHigherEducation(HigherEducation instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertEmployment(Employment instance);
    partial void UpdateEmployment(Employment instance);
    partial void DeleteEmployment(Employment instance);
    partial void InsertDisability(Disability instance);
    partial void UpdateDisability(Disability instance);
    partial void DeleteDisability(Disability instance);
    partial void InsertInbox(Inbox instance);
    partial void UpdateInbox(Inbox instance);
    partial void DeleteInbox(Inbox instance);
    partial void InsertLicense(License instance);
    partial void UpdateLicense(License instance);
    partial void DeleteLicense(License instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertVacancy(Vacancy instance);
    partial void UpdateVacancy(Vacancy instance);
    partial void DeleteVacancy(Vacancy instance);
    partial void InsertVacancyKillerQuestion(VacancyKillerQuestion instance);
    partial void UpdateVacancyKillerQuestion(VacancyKillerQuestion instance);
    partial void DeleteVacancyKillerQuestion(VacancyKillerQuestion instance);
    partial void InsertKeyWord(KeyWord instance);
    partial void UpdateKeyWord(KeyWord instance);
    partial void DeleteKeyWord(KeyWord instance);
    partial void InsertsupportDoc(supportDoc instance);
    partial void UpdatesupportDoc(supportDoc instance);
    partial void DeletesupportDoc(supportDoc instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertContactInfo(ContactInfo instance);
    partial void UpdateContactInfo(ContactInfo instance);
    partial void DeleteContactInfo(ContactInfo instance);
    #endregion
		
		public ModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["careersDbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<BasicEdu> BasicEdus
		{
			get
			{
				return this.GetTable<BasicEdu>();
			}
		}
		
		public System.Data.Linq.Table<BasicEduSubject> BasicEduSubjects
		{
			get
			{
				return this.GetTable<BasicEduSubject>();
			}
		}
		
		public System.Data.Linq.Table<HigherEducation> HigherEducations
		{
			get
			{
				return this.GetTable<HigherEducation>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Employment> Employments
		{
			get
			{
				return this.GetTable<Employment>();
			}
		}
		
		public System.Data.Linq.Table<Disability> Disabilities
		{
			get
			{
				return this.GetTable<Disability>();
			}
		}
		
		public System.Data.Linq.Table<Inbox> Inboxes
		{
			get
			{
				return this.GetTable<Inbox>();
			}
		}
		
		public System.Data.Linq.Table<License> Licenses
		{
			get
			{
				return this.GetTable<License>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Vacancy> Vacancies
		{
			get
			{
				return this.GetTable<Vacancy>();
			}
		}
		
		public System.Data.Linq.Table<VacancyKillerQuestion> VacancyKillerQuestions
		{
			get
			{
				return this.GetTable<VacancyKillerQuestion>();
			}
		}
		
		public System.Data.Linq.Table<KeyWord> KeyWords
		{
			get
			{
				return this.GetTable<KeyWord>();
			}
		}
		
		public System.Data.Linq.Table<supportDoc> supportDocs
		{
			get
			{
				return this.GetTable<supportDoc>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ContactInfo> ContactInfos
		{
			get
			{
				return this.GetTable<ContactInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _addressType;
		
		private int _unitNumber;
		
		private string _street;
		
		private string _suburb;
		
		private string _town;
		
		private string _province;
		
		private string _country;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnaddressTypeChanging(string value);
    partial void OnaddressTypeChanged();
    partial void OnunitNumberChanging(int value);
    partial void OnunitNumberChanged();
    partial void OnstreetChanging(string value);
    partial void OnstreetChanged();
    partial void OnsuburbChanging(string value);
    partial void OnsuburbChanged();
    partial void OntownChanging(string value);
    partial void OntownChanged();
    partial void OnprovinceChanging(string value);
    partial void OnprovinceChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    #endregion
		
		public Address()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressType", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string addressType
		{
			get
			{
				return this._addressType;
			}
			set
			{
				if ((this._addressType != value))
				{
					this.OnaddressTypeChanging(value);
					this.SendPropertyChanging();
					this._addressType = value;
					this.SendPropertyChanged("addressType");
					this.OnaddressTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unitNumber", DbType="Int NOT NULL")]
		public int unitNumber
		{
			get
			{
				return this._unitNumber;
			}
			set
			{
				if ((this._unitNumber != value))
				{
					this.OnunitNumberChanging(value);
					this.SendPropertyChanging();
					this._unitNumber = value;
					this.SendPropertyChanged("unitNumber");
					this.OnunitNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_street", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string street
		{
			get
			{
				return this._street;
			}
			set
			{
				if ((this._street != value))
				{
					this.OnstreetChanging(value);
					this.SendPropertyChanging();
					this._street = value;
					this.SendPropertyChanged("street");
					this.OnstreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_suburb", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string suburb
		{
			get
			{
				return this._suburb;
			}
			set
			{
				if ((this._suburb != value))
				{
					this.OnsuburbChanging(value);
					this.SendPropertyChanging();
					this._suburb = value;
					this.SendPropertyChanged("suburb");
					this.OnsuburbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_town", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string town
		{
			get
			{
				return this._town;
			}
			set
			{
				if ((this._town != value))
				{
					this.OntownChanging(value);
					this.SendPropertyChanging();
					this._town = value;
					this.SendPropertyChanged("town");
					this.OntownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_province", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string province
		{
			get
			{
				return this._province;
			}
			set
			{
				if ((this._province != value))
				{
					this.OnprovinceChanging(value);
					this.SendPropertyChanging();
					this._province = value;
					this.SendPropertyChanged("province");
					this.OnprovinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Address", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicEdu")]
	public partial class BasicEdu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _school;
		
		private string _town;
		
		private string _province;
		
		private string _country;
		
		private int _levelCompleted;
		
		private EntitySet<BasicEduSubject> _BasicEduSubjects;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnschoolChanging(string value);
    partial void OnschoolChanged();
    partial void OntownChanging(string value);
    partial void OntownChanged();
    partial void OnprovinceChanging(string value);
    partial void OnprovinceChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnlevelCompletedChanging(int value);
    partial void OnlevelCompletedChanged();
    #endregion
		
		public BasicEdu()
		{
			this._BasicEduSubjects = new EntitySet<BasicEduSubject>(new Action<BasicEduSubject>(this.attach_BasicEduSubjects), new Action<BasicEduSubject>(this.detach_BasicEduSubjects));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string school
		{
			get
			{
				return this._school;
			}
			set
			{
				if ((this._school != value))
				{
					this.OnschoolChanging(value);
					this.SendPropertyChanging();
					this._school = value;
					this.SendPropertyChanged("school");
					this.OnschoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_town", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string town
		{
			get
			{
				return this._town;
			}
			set
			{
				if ((this._town != value))
				{
					this.OntownChanging(value);
					this.SendPropertyChanging();
					this._town = value;
					this.SendPropertyChanged("town");
					this.OntownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_province", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string province
		{
			get
			{
				return this._province;
			}
			set
			{
				if ((this._province != value))
				{
					this.OnprovinceChanging(value);
					this.SendPropertyChanging();
					this._province = value;
					this.SendPropertyChanged("province");
					this.OnprovinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_levelCompleted", DbType="Int NOT NULL")]
		public int levelCompleted
		{
			get
			{
				return this._levelCompleted;
			}
			set
			{
				if ((this._levelCompleted != value))
				{
					this.OnlevelCompletedChanging(value);
					this.SendPropertyChanging();
					this._levelCompleted = value;
					this.SendPropertyChanged("levelCompleted");
					this.OnlevelCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicEdu_BasicEduSubject", Storage="_BasicEduSubjects", ThisKey="userName", OtherKey="userName")]
		public EntitySet<BasicEduSubject> BasicEduSubjects
		{
			get
			{
				return this._BasicEduSubjects;
			}
			set
			{
				this._BasicEduSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_BasicEdu", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.BasicEdu = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.BasicEdu = this;
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasicEduSubjects(BasicEduSubject entity)
		{
			this.SendPropertyChanging();
			entity.BasicEdu = this;
		}
		
		private void detach_BasicEduSubjects(BasicEduSubject entity)
		{
			this.SendPropertyChanging();
			entity.BasicEdu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicEduSubject")]
	public partial class BasicEduSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _subjectName;
		
		private string _subjectDescription;
		
		private EntityRef<BasicEdu> _BasicEdu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnsubjectNameChanging(string value);
    partial void OnsubjectNameChanged();
    partial void OnsubjectDescriptionChanging(string value);
    partial void OnsubjectDescriptionChanged();
    #endregion
		
		public BasicEduSubject()
		{
			this._BasicEdu = default(EntityRef<BasicEdu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._BasicEdu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string subjectName
		{
			get
			{
				return this._subjectName;
			}
			set
			{
				if ((this._subjectName != value))
				{
					this.OnsubjectNameChanging(value);
					this.SendPropertyChanging();
					this._subjectName = value;
					this.SendPropertyChanged("subjectName");
					this.OnsubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectDescription", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string subjectDescription
		{
			get
			{
				return this._subjectDescription;
			}
			set
			{
				if ((this._subjectDescription != value))
				{
					this.OnsubjectDescriptionChanging(value);
					this.SendPropertyChanging();
					this._subjectDescription = value;
					this.SendPropertyChanged("subjectDescription");
					this.OnsubjectDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicEdu_BasicEduSubject", Storage="_BasicEdu", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public BasicEdu BasicEdu
		{
			get
			{
				return this._BasicEdu.Entity;
			}
			set
			{
				BasicEdu previousValue = this._BasicEdu.Entity;
				if (((previousValue != value) 
							|| (this._BasicEdu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicEdu.Entity = null;
						previousValue.BasicEduSubjects.Remove(this);
					}
					this._BasicEdu.Entity = value;
					if ((value != null))
					{
						value.BasicEduSubjects.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("BasicEdu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HigherEducation")]
	public partial class HigherEducation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _institution;
		
		private string _town;
		
		private string _province;
		
		private string _country;
		
		private string _educationType;
		
		private string _major;
		
		private string _industry;
		
		private string _length;
		
		private string _nqf;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OninstitutionChanging(string value);
    partial void OninstitutionChanged();
    partial void OntownChanging(string value);
    partial void OntownChanged();
    partial void OnprovinceChanging(string value);
    partial void OnprovinceChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OneducationTypeChanging(string value);
    partial void OneducationTypeChanged();
    partial void OnmajorChanging(string value);
    partial void OnmajorChanged();
    partial void OnindustryChanging(string value);
    partial void OnindustryChanged();
    partial void OnlengthChanging(string value);
    partial void OnlengthChanged();
    partial void OnnqfChanging(string value);
    partial void OnnqfChanged();
    #endregion
		
		public HigherEducation()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_institution", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string institution
		{
			get
			{
				return this._institution;
			}
			set
			{
				if ((this._institution != value))
				{
					this.OninstitutionChanging(value);
					this.SendPropertyChanging();
					this._institution = value;
					this.SendPropertyChanged("institution");
					this.OninstitutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_town", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string town
		{
			get
			{
				return this._town;
			}
			set
			{
				if ((this._town != value))
				{
					this.OntownChanging(value);
					this.SendPropertyChanging();
					this._town = value;
					this.SendPropertyChanged("town");
					this.OntownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_province", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string province
		{
			get
			{
				return this._province;
			}
			set
			{
				if ((this._province != value))
				{
					this.OnprovinceChanging(value);
					this.SendPropertyChanging();
					this._province = value;
					this.SendPropertyChanged("province");
					this.OnprovinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_educationType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string educationType
		{
			get
			{
				return this._educationType;
			}
			set
			{
				if ((this._educationType != value))
				{
					this.OneducationTypeChanging(value);
					this.SendPropertyChanging();
					this._educationType = value;
					this.SendPropertyChanged("educationType");
					this.OneducationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_major", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string major
		{
			get
			{
				return this._major;
			}
			set
			{
				if ((this._major != value))
				{
					this.OnmajorChanging(value);
					this.SendPropertyChanging();
					this._major = value;
					this.SendPropertyChanged("major");
					this.OnmajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_industry", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string industry
		{
			get
			{
				return this._industry;
			}
			set
			{
				if ((this._industry != value))
				{
					this.OnindustryChanging(value);
					this.SendPropertyChanging();
					this._industry = value;
					this.SendPropertyChanged("industry");
					this.OnindustryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_length", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string length
		{
			get
			{
				return this._length;
			}
			set
			{
				if ((this._length != value))
				{
					this.OnlengthChanging(value);
					this.SendPropertyChanging();
					this._length = value;
					this.SendPropertyChanged("length");
					this.OnlengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nqf", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nqf
		{
			get
			{
				return this._nqf;
			}
			set
			{
				if ((this._nqf != value))
				{
					this.OnnqfChanging(value);
					this.SendPropertyChanging();
					this._nqf = value;
					this.SendPropertyChanged("nqf");
					this.OnnqfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_HigherEducation", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.HigherEducations.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.HigherEducations.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _languageName;
		
		private string _reads;
		
		private string _write;
		
		private string _speak;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnlanguageNameChanging(string value);
    partial void OnlanguageNameChanged();
    partial void OnreadsChanging(string value);
    partial void OnreadsChanged();
    partial void OnwriteChanging(string value);
    partial void OnwriteChanged();
    partial void OnspeakChanging(string value);
    partial void OnspeakChanged();
    #endregion
		
		public Language()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_languageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string languageName
		{
			get
			{
				return this._languageName;
			}
			set
			{
				if ((this._languageName != value))
				{
					this.OnlanguageNameChanging(value);
					this.SendPropertyChanging();
					this._languageName = value;
					this.SendPropertyChanged("languageName");
					this.OnlanguageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reads", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string reads
		{
			get
			{
				return this._reads;
			}
			set
			{
				if ((this._reads != value))
				{
					this.OnreadsChanging(value);
					this.SendPropertyChanging();
					this._reads = value;
					this.SendPropertyChanged("reads");
					this.OnreadsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_write", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string write
		{
			get
			{
				return this._write;
			}
			set
			{
				if ((this._write != value))
				{
					this.OnwriteChanging(value);
					this.SendPropertyChanging();
					this._write = value;
					this.SendPropertyChanged("write");
					this.OnwriteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_speak", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string speak
		{
			get
			{
				return this._speak;
			}
			set
			{
				if ((this._speak != value))
				{
					this.OnspeakChanging(value);
					this.SendPropertyChanging();
					this._speak = value;
					this.SendPropertyChanged("speak");
					this.OnspeakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Language", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Languages.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Languages.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employment")]
	public partial class Employment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _title;
		
		private string _company;
		
		private string _industry;
		
		private string _town;
		
		private string _province;
		
		private string _country;
		
		private string _empType;
		
		private string _currentEmployer;
		
		private decimal _gross;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private string _responsibilities;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OncompanyChanging(string value);
    partial void OncompanyChanged();
    partial void OnindustryChanging(string value);
    partial void OnindustryChanged();
    partial void OntownChanging(string value);
    partial void OntownChanged();
    partial void OnprovinceChanging(string value);
    partial void OnprovinceChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnempTypeChanging(string value);
    partial void OnempTypeChanged();
    partial void OncurrentEmployerChanging(string value);
    partial void OncurrentEmployerChanged();
    partial void OngrossChanging(decimal value);
    partial void OngrossChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnresponsibilitiesChanging(string value);
    partial void OnresponsibilitiesChanged();
    #endregion
		
		public Employment()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string company
		{
			get
			{
				return this._company;
			}
			set
			{
				if ((this._company != value))
				{
					this.OncompanyChanging(value);
					this.SendPropertyChanging();
					this._company = value;
					this.SendPropertyChanged("company");
					this.OncompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_industry", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string industry
		{
			get
			{
				return this._industry;
			}
			set
			{
				if ((this._industry != value))
				{
					this.OnindustryChanging(value);
					this.SendPropertyChanging();
					this._industry = value;
					this.SendPropertyChanged("industry");
					this.OnindustryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_town", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string town
		{
			get
			{
				return this._town;
			}
			set
			{
				if ((this._town != value))
				{
					this.OntownChanging(value);
					this.SendPropertyChanging();
					this._town = value;
					this.SendPropertyChanged("town");
					this.OntownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_province", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string province
		{
			get
			{
				return this._province;
			}
			set
			{
				if ((this._province != value))
				{
					this.OnprovinceChanging(value);
					this.SendPropertyChanging();
					this._province = value;
					this.SendPropertyChanged("province");
					this.OnprovinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string empType
		{
			get
			{
				return this._empType;
			}
			set
			{
				if ((this._empType != value))
				{
					this.OnempTypeChanging(value);
					this.SendPropertyChanging();
					this._empType = value;
					this.SendPropertyChanged("empType");
					this.OnempTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentEmployer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string currentEmployer
		{
			get
			{
				return this._currentEmployer;
			}
			set
			{
				if ((this._currentEmployer != value))
				{
					this.OncurrentEmployerChanging(value);
					this.SendPropertyChanging();
					this._currentEmployer = value;
					this.SendPropertyChanged("currentEmployer");
					this.OncurrentEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gross", DbType="Money NOT NULL")]
		public decimal gross
		{
			get
			{
				return this._gross;
			}
			set
			{
				if ((this._gross != value))
				{
					this.OngrossChanging(value);
					this.SendPropertyChanging();
					this._gross = value;
					this.SendPropertyChanged("gross");
					this.OngrossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_responsibilities", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string responsibilities
		{
			get
			{
				return this._responsibilities;
			}
			set
			{
				if ((this._responsibilities != value))
				{
					this.OnresponsibilitiesChanging(value);
					this.SendPropertyChanging();
					this._responsibilities = value;
					this.SendPropertyChanged("responsibilities");
					this.OnresponsibilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Employment", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Employments.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Employments.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Disability")]
	public partial class Disability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _disabilityType;
		
		private string _description;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OndisabilityTypeChanging(string value);
    partial void OndisabilityTypeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Disability()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disabilityType", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string disabilityType
		{
			get
			{
				return this._disabilityType;
			}
			set
			{
				if ((this._disabilityType != value))
				{
					this.OndisabilityTypeChanging(value);
					this.SendPropertyChanging();
					this._disabilityType = value;
					this.SendPropertyChanged("disabilityType");
					this.OndisabilityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Disability", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Disabilities.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Disabilities.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inbox")]
	public partial class Inbox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private int _messageId;
		
		private System.DateTime _date;
		
		private string _unread;
		
		private string _message;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnmessageIdChanging(int value);
    partial void OnmessageIdChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnunreadChanging(string value);
    partial void OnunreadChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    #endregion
		
		public Inbox()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int messageId
		{
			get
			{
				return this._messageId;
			}
			set
			{
				if ((this._messageId != value))
				{
					this.OnmessageIdChanging(value);
					this.SendPropertyChanging();
					this._messageId = value;
					this.SendPropertyChanged("messageId");
					this.OnmessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unread", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string unread
		{
			get
			{
				return this._unread;
			}
			set
			{
				if ((this._unread != value))
				{
					this.OnunreadChanging(value);
					this.SendPropertyChanging();
					this._unread = value;
					this.SendPropertyChanged("unread");
					this.OnunreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Inbox", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Inboxes.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Inboxes.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.License")]
	public partial class License : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _type;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public License()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_License", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.License = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.License = this;
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _vacancyNumber;
		
		private string _status;
		
		private EntityRef<Vacancy> _Vacancy;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnvacancyNumberChanging(string value);
    partial void OnvacancyNumberChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Application()
		{
			this._Vacancy = default(EntityRef<Vacancy>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vacancyNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string vacancyNumber
		{
			get
			{
				return this._vacancyNumber;
			}
			set
			{
				if ((this._vacancyNumber != value))
				{
					if (this._Vacancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvacancyNumberChanging(value);
					this.SendPropertyChanging();
					this._vacancyNumber = value;
					this.SendPropertyChanged("vacancyNumber");
					this.OnvacancyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vacancy_Application", Storage="_Vacancy", ThisKey="vacancyNumber", OtherKey="vacancyNumber", IsForeignKey=true)]
		public Vacancy Vacancy
		{
			get
			{
				return this._Vacancy.Entity;
			}
			set
			{
				Vacancy previousValue = this._Vacancy.Entity;
				if (((previousValue != value) 
							|| (this._Vacancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vacancy.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Vacancy.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._vacancyNumber = value.vacancyNumber;
					}
					else
					{
						this._vacancyNumber = default(string);
					}
					this.SendPropertyChanged("Vacancy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Application", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vacancy")]
	public partial class Vacancy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _vacancyNumber;
		
		private string _viewStatus;
		
		private string _title;
		
		private string _description;
		
		private string _department;
		
		private string _site;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private int _viewCount;
		
		private string _status;
		
		private string _manager;
		
		private string _recruiter;
		
		private EntitySet<Application> _Applications;
		
		private EntitySet<VacancyKillerQuestion> _VacancyKillerQuestions;
		
		private EntitySet<KeyWord> _KeyWords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvacancyNumberChanging(string value);
    partial void OnvacancyNumberChanged();
    partial void OnviewStatusChanging(string value);
    partial void OnviewStatusChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndepartmentChanging(string value);
    partial void OndepartmentChanged();
    partial void OnsiteChanging(string value);
    partial void OnsiteChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnviewCountChanging(int value);
    partial void OnviewCountChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnmanagerChanging(string value);
    partial void OnmanagerChanged();
    partial void OnrecruiterChanging(string value);
    partial void OnrecruiterChanged();
    #endregion
		
		public Vacancy()
		{
			this._Applications = new EntitySet<Application>(new Action<Application>(this.attach_Applications), new Action<Application>(this.detach_Applications));
			this._VacancyKillerQuestions = new EntitySet<VacancyKillerQuestion>(new Action<VacancyKillerQuestion>(this.attach_VacancyKillerQuestions), new Action<VacancyKillerQuestion>(this.detach_VacancyKillerQuestions));
			this._KeyWords = new EntitySet<KeyWord>(new Action<KeyWord>(this.attach_KeyWords), new Action<KeyWord>(this.detach_KeyWords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vacancyNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string vacancyNumber
		{
			get
			{
				return this._vacancyNumber;
			}
			set
			{
				if ((this._vacancyNumber != value))
				{
					this.OnvacancyNumberChanging(value);
					this.SendPropertyChanging();
					this._vacancyNumber = value;
					this.SendPropertyChanged("vacancyNumber");
					this.OnvacancyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string viewStatus
		{
			get
			{
				return this._viewStatus;
			}
			set
			{
				if ((this._viewStatus != value))
				{
					this.OnviewStatusChanging(value);
					this.SendPropertyChanging();
					this._viewStatus = value;
					this.SendPropertyChanged("viewStatus");
					this.OnviewStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_department", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string department
		{
			get
			{
				return this._department;
			}
			set
			{
				if ((this._department != value))
				{
					this.OndepartmentChanging(value);
					this.SendPropertyChanging();
					this._department = value;
					this.SendPropertyChanged("department");
					this.OndepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_site", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string site
		{
			get
			{
				return this._site;
			}
			set
			{
				if ((this._site != value))
				{
					this.OnsiteChanging(value);
					this.SendPropertyChanging();
					this._site = value;
					this.SendPropertyChanged("site");
					this.OnsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewCount", DbType="Int NOT NULL")]
		public int viewCount
		{
			get
			{
				return this._viewCount;
			}
			set
			{
				if ((this._viewCount != value))
				{
					this.OnviewCountChanging(value);
					this.SendPropertyChanging();
					this._viewCount = value;
					this.SendPropertyChanged("viewCount");
					this.OnviewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manager", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string manager
		{
			get
			{
				return this._manager;
			}
			set
			{
				if ((this._manager != value))
				{
					this.OnmanagerChanging(value);
					this.SendPropertyChanging();
					this._manager = value;
					this.SendPropertyChanged("manager");
					this.OnmanagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recruiter", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string recruiter
		{
			get
			{
				return this._recruiter;
			}
			set
			{
				if ((this._recruiter != value))
				{
					this.OnrecruiterChanging(value);
					this.SendPropertyChanging();
					this._recruiter = value;
					this.SendPropertyChanged("recruiter");
					this.OnrecruiterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vacancy_Application", Storage="_Applications", ThisKey="vacancyNumber", OtherKey="vacancyNumber")]
		public EntitySet<Application> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vacancy_VacancyKillerQuestion", Storage="_VacancyKillerQuestions", ThisKey="vacancyNumber", OtherKey="vacancyNumber")]
		public EntitySet<VacancyKillerQuestion> VacancyKillerQuestions
		{
			get
			{
				return this._VacancyKillerQuestions;
			}
			set
			{
				this._VacancyKillerQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vacancy_KeyWord", Storage="_KeyWords", ThisKey="vacancyNumber", OtherKey="vacancyNumber")]
		public EntitySet<KeyWord> KeyWords
		{
			get
			{
				return this._KeyWords;
			}
			set
			{
				this._KeyWords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Vacancy = this;
		}
		
		private void detach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Vacancy = null;
		}
		
		private void attach_VacancyKillerQuestions(VacancyKillerQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Vacancy = this;
		}
		
		private void detach_VacancyKillerQuestions(VacancyKillerQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Vacancy = null;
		}
		
		private void attach_KeyWords(KeyWord entity)
		{
			this.SendPropertyChanging();
			entity.Vacancy = this;
		}
		
		private void detach_KeyWords(KeyWord entity)
		{
			this.SendPropertyChanging();
			entity.Vacancy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VacancyKillerQuestion")]
	public partial class VacancyKillerQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _vacancyNumber;
		
		private string _question;
		
		private string _answer;
		
		private EntityRef<Vacancy> _Vacancy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvacancyNumberChanging(string value);
    partial void OnvacancyNumberChanged();
    partial void OnquestionChanging(string value);
    partial void OnquestionChanged();
    partial void OnanswerChanging(string value);
    partial void OnanswerChanged();
    #endregion
		
		public VacancyKillerQuestion()
		{
			this._Vacancy = default(EntityRef<Vacancy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vacancyNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string vacancyNumber
		{
			get
			{
				return this._vacancyNumber;
			}
			set
			{
				if ((this._vacancyNumber != value))
				{
					if (this._Vacancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvacancyNumberChanging(value);
					this.SendPropertyChanging();
					this._vacancyNumber = value;
					this.SendPropertyChanged("vacancyNumber");
					this.OnvacancyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string question
		{
			get
			{
				return this._question;
			}
			set
			{
				if ((this._question != value))
				{
					this.OnquestionChanging(value);
					this.SendPropertyChanging();
					this._question = value;
					this.SendPropertyChanged("question");
					this.OnquestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vacancy_VacancyKillerQuestion", Storage="_Vacancy", ThisKey="vacancyNumber", OtherKey="vacancyNumber", IsForeignKey=true)]
		public Vacancy Vacancy
		{
			get
			{
				return this._Vacancy.Entity;
			}
			set
			{
				Vacancy previousValue = this._Vacancy.Entity;
				if (((previousValue != value) 
							|| (this._Vacancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vacancy.Entity = null;
						previousValue.VacancyKillerQuestions.Remove(this);
					}
					this._Vacancy.Entity = value;
					if ((value != null))
					{
						value.VacancyKillerQuestions.Add(this);
						this._vacancyNumber = value.vacancyNumber;
					}
					else
					{
						this._vacancyNumber = default(string);
					}
					this.SendPropertyChanged("Vacancy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KeyWord")]
	public partial class KeyWord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _vacancyNumber;
		
		private string _word;
		
		private EntityRef<Vacancy> _Vacancy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvacancyNumberChanging(string value);
    partial void OnvacancyNumberChanged();
    partial void OnwordChanging(string value);
    partial void OnwordChanged();
    #endregion
		
		public KeyWord()
		{
			this._Vacancy = default(EntityRef<Vacancy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vacancyNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string vacancyNumber
		{
			get
			{
				return this._vacancyNumber;
			}
			set
			{
				if ((this._vacancyNumber != value))
				{
					if (this._Vacancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvacancyNumberChanging(value);
					this.SendPropertyChanging();
					this._vacancyNumber = value;
					this.SendPropertyChanged("vacancyNumber");
					this.OnvacancyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_word", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string word
		{
			get
			{
				return this._word;
			}
			set
			{
				if ((this._word != value))
				{
					this.OnwordChanging(value);
					this.SendPropertyChanging();
					this._word = value;
					this.SendPropertyChanged("word");
					this.OnwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vacancy_KeyWord", Storage="_Vacancy", ThisKey="vacancyNumber", OtherKey="vacancyNumber", IsForeignKey=true)]
		public Vacancy Vacancy
		{
			get
			{
				return this._Vacancy.Entity;
			}
			set
			{
				Vacancy previousValue = this._Vacancy.Entity;
				if (((previousValue != value) 
							|| (this._Vacancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vacancy.Entity = null;
						previousValue.KeyWords.Remove(this);
					}
					this._Vacancy.Entity = value;
					if ((value != null))
					{
						value.KeyWords.Add(this);
						this._vacancyNumber = value.vacancyNumber;
					}
					else
					{
						this._vacancyNumber = default(string);
					}
					this.SendPropertyChanged("Vacancy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.supportDoc")]
	public partial class supportDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _title;
		
		private string _userName;
		
		private string _description;
		
		private System.Data.Linq.Binary _content;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncontentChanging(System.Data.Linq.Binary value);
    partial void OncontentChanged();
    #endregion
		
		public supportDoc()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_supportDoc", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.supportDocs.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.supportDocs.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    #endregion
		
		public Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="NVarChar(255)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _password;
		
		private string _status;
		
		private string _accountType;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<BasicEdu> _BasicEdu;
		
		private EntitySet<HigherEducation> _HigherEducations;
		
		private EntitySet<Language> _Languages;
		
		private EntitySet<Employment> _Employments;
		
		private EntitySet<Disability> _Disabilities;
		
		private EntitySet<Inbox> _Inboxes;
		
		private EntityRef<License> _License;
		
		private EntitySet<Application> _Applications;
		
		private EntitySet<supportDoc> _supportDocs;
		
		private EntitySet<User> _Users;
		
		private EntitySet<ContactInfo> _ContactInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnaccountTypeChanging(string value);
    partial void OnaccountTypeChanged();
    #endregion
		
		public Account()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._BasicEdu = default(EntityRef<BasicEdu>);
			this._HigherEducations = new EntitySet<HigherEducation>(new Action<HigherEducation>(this.attach_HigherEducations), new Action<HigherEducation>(this.detach_HigherEducations));
			this._Languages = new EntitySet<Language>(new Action<Language>(this.attach_Languages), new Action<Language>(this.detach_Languages));
			this._Employments = new EntitySet<Employment>(new Action<Employment>(this.attach_Employments), new Action<Employment>(this.detach_Employments));
			this._Disabilities = new EntitySet<Disability>(new Action<Disability>(this.attach_Disabilities), new Action<Disability>(this.detach_Disabilities));
			this._Inboxes = new EntitySet<Inbox>(new Action<Inbox>(this.attach_Inboxes), new Action<Inbox>(this.detach_Inboxes));
			this._License = default(EntityRef<License>);
			this._Applications = new EntitySet<Application>(new Action<Application>(this.attach_Applications), new Action<Application>(this.detach_Applications));
			this._supportDocs = new EntitySet<supportDoc>(new Action<supportDoc>(this.attach_supportDocs), new Action<supportDoc>(this.detach_supportDocs));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._ContactInfos = new EntitySet<ContactInfo>(new Action<ContactInfo>(this.attach_ContactInfos), new Action<ContactInfo>(this.detach_ContactInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string accountType
		{
			get
			{
				return this._accountType;
			}
			set
			{
				if ((this._accountType != value))
				{
					this.OnaccountTypeChanging(value);
					this.SendPropertyChanging();
					this._accountType = value;
					this.SendPropertyChanged("accountType");
					this.OnaccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Address", Storage="_Addresses", ThisKey="userName", OtherKey="userName")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_BasicEdu", Storage="_BasicEdu", ThisKey="userName", OtherKey="userName", IsUnique=true, IsForeignKey=false)]
		public BasicEdu BasicEdu
		{
			get
			{
				return this._BasicEdu.Entity;
			}
			set
			{
				BasicEdu previousValue = this._BasicEdu.Entity;
				if (((previousValue != value) 
							|| (this._BasicEdu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicEdu.Entity = null;
						previousValue.Account = null;
					}
					this._BasicEdu.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("BasicEdu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_HigherEducation", Storage="_HigherEducations", ThisKey="userName", OtherKey="userName")]
		public EntitySet<HigherEducation> HigherEducations
		{
			get
			{
				return this._HigherEducations;
			}
			set
			{
				this._HigherEducations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Language", Storage="_Languages", ThisKey="userName", OtherKey="userName")]
		public EntitySet<Language> Languages
		{
			get
			{
				return this._Languages;
			}
			set
			{
				this._Languages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Employment", Storage="_Employments", ThisKey="userName", OtherKey="userName")]
		public EntitySet<Employment> Employments
		{
			get
			{
				return this._Employments;
			}
			set
			{
				this._Employments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Disability", Storage="_Disabilities", ThisKey="userName", OtherKey="userName")]
		public EntitySet<Disability> Disabilities
		{
			get
			{
				return this._Disabilities;
			}
			set
			{
				this._Disabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Inbox", Storage="_Inboxes", ThisKey="userName", OtherKey="userName")]
		public EntitySet<Inbox> Inboxes
		{
			get
			{
				return this._Inboxes;
			}
			set
			{
				this._Inboxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_License", Storage="_License", ThisKey="userName", OtherKey="userName", IsUnique=true, IsForeignKey=false)]
		public License License
		{
			get
			{
				return this._License.Entity;
			}
			set
			{
				License previousValue = this._License.Entity;
				if (((previousValue != value) 
							|| (this._License.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._License.Entity = null;
						previousValue.Account = null;
					}
					this._License.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("License");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Application", Storage="_Applications", ThisKey="userName", OtherKey="userName")]
		public EntitySet<Application> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_supportDoc", Storage="_supportDocs", ThisKey="userName", OtherKey="userName")]
		public EntitySet<supportDoc> supportDocs
		{
			get
			{
				return this._supportDocs;
			}
			set
			{
				this._supportDocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_User", Storage="_Users", ThisKey="userName", OtherKey="userName")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_ContactInfo", Storage="_ContactInfos", ThisKey="userName", OtherKey="userName")]
		public EntitySet<ContactInfo> ContactInfos
		{
			get
			{
				return this._ContactInfos;
			}
			set
			{
				this._ContactInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_HigherEducations(HigherEducation entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_HigherEducations(HigherEducation entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Languages(Language entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Languages(Language entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Employments(Employment entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Employments(Employment entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Disabilities(Disability entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Disabilities(Disability entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Inboxes(Inbox entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Inboxes(Inbox entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_supportDocs(supportDoc entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_supportDocs(supportDoc entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_ContactInfos(ContactInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_ContactInfos(ContactInfo entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _userName;
		
		private string _fullname;
		
		private string _nickName;
		
		private string _surname;
		
		private string _gender;
		
		private string _race;
		
		private bool _disabled;
		
		private bool _citizenship;
		
		private string _idType;
		
		private bool _license;
		
		private bool _basicEducation;
		
		private bool _higherEducation;
		
		private bool _language;
		
		private bool _residentialAddress;
		
		private bool _postalAddress;
		
		private bool _employed;
		
		private bool _employmentHistory;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnfullnameChanging(string value);
    partial void OnfullnameChanged();
    partial void OnnickNameChanging(string value);
    partial void OnnickNameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnraceChanging(string value);
    partial void OnraceChanged();
    partial void OndisabledChanging(bool value);
    partial void OndisabledChanged();
    partial void OncitizenshipChanging(bool value);
    partial void OncitizenshipChanged();
    partial void OnidTypeChanging(string value);
    partial void OnidTypeChanged();
    partial void OnlicenseChanging(bool value);
    partial void OnlicenseChanged();
    partial void OnbasicEducationChanging(bool value);
    partial void OnbasicEducationChanged();
    partial void OnhigherEducationChanging(bool value);
    partial void OnhigherEducationChanged();
    partial void OnlanguageChanging(bool value);
    partial void OnlanguageChanged();
    partial void OnresidentialAddressChanging(bool value);
    partial void OnresidentialAddressChanged();
    partial void OnpostalAddressChanging(bool value);
    partial void OnpostalAddressChanged();
    partial void OnemployedChanging(bool value);
    partial void OnemployedChanged();
    partial void OnemploymentHistoryChanging(bool value);
    partial void OnemploymentHistoryChanged();
    #endregion
		
		public User()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string fullname
		{
			get
			{
				return this._fullname;
			}
			set
			{
				if ((this._fullname != value))
				{
					this.OnfullnameChanging(value);
					this.SendPropertyChanging();
					this._fullname = value;
					this.SendPropertyChanged("fullname");
					this.OnfullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nickName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nickName
		{
			get
			{
				return this._nickName;
			}
			set
			{
				if ((this._nickName != value))
				{
					this.OnnickNameChanging(value);
					this.SendPropertyChanging();
					this._nickName = value;
					this.SendPropertyChanged("nickName");
					this.OnnickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_race", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string race
		{
			get
			{
				return this._race;
			}
			set
			{
				if ((this._race != value))
				{
					this.OnraceChanging(value);
					this.SendPropertyChanging();
					this._race = value;
					this.SendPropertyChanged("race");
					this.OnraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disabled", DbType="Bit NOT NULL")]
		public bool disabled
		{
			get
			{
				return this._disabled;
			}
			set
			{
				if ((this._disabled != value))
				{
					this.OndisabledChanging(value);
					this.SendPropertyChanging();
					this._disabled = value;
					this.SendPropertyChanged("disabled");
					this.OndisabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_citizenship", DbType="Bit NOT NULL")]
		public bool citizenship
		{
			get
			{
				return this._citizenship;
			}
			set
			{
				if ((this._citizenship != value))
				{
					this.OncitizenshipChanging(value);
					this.SendPropertyChanging();
					this._citizenship = value;
					this.SendPropertyChanged("citizenship");
					this.OncitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string idType
		{
			get
			{
				return this._idType;
			}
			set
			{
				if ((this._idType != value))
				{
					this.OnidTypeChanging(value);
					this.SendPropertyChanging();
					this._idType = value;
					this.SendPropertyChanged("idType");
					this.OnidTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_license", DbType="Bit NOT NULL")]
		public bool license
		{
			get
			{
				return this._license;
			}
			set
			{
				if ((this._license != value))
				{
					this.OnlicenseChanging(value);
					this.SendPropertyChanging();
					this._license = value;
					this.SendPropertyChanged("license");
					this.OnlicenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_basicEducation", DbType="Bit NOT NULL")]
		public bool basicEducation
		{
			get
			{
				return this._basicEducation;
			}
			set
			{
				if ((this._basicEducation != value))
				{
					this.OnbasicEducationChanging(value);
					this.SendPropertyChanging();
					this._basicEducation = value;
					this.SendPropertyChanged("basicEducation");
					this.OnbasicEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_higherEducation", DbType="Bit NOT NULL")]
		public bool higherEducation
		{
			get
			{
				return this._higherEducation;
			}
			set
			{
				if ((this._higherEducation != value))
				{
					this.OnhigherEducationChanging(value);
					this.SendPropertyChanging();
					this._higherEducation = value;
					this.SendPropertyChanged("higherEducation");
					this.OnhigherEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_language", DbType="Bit NOT NULL")]
		public bool language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_residentialAddress", DbType="Bit NOT NULL")]
		public bool residentialAddress
		{
			get
			{
				return this._residentialAddress;
			}
			set
			{
				if ((this._residentialAddress != value))
				{
					this.OnresidentialAddressChanging(value);
					this.SendPropertyChanging();
					this._residentialAddress = value;
					this.SendPropertyChanged("residentialAddress");
					this.OnresidentialAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalAddress", DbType="Bit NOT NULL")]
		public bool postalAddress
		{
			get
			{
				return this._postalAddress;
			}
			set
			{
				if ((this._postalAddress != value))
				{
					this.OnpostalAddressChanging(value);
					this.SendPropertyChanging();
					this._postalAddress = value;
					this.SendPropertyChanged("postalAddress");
					this.OnpostalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employed", DbType="Bit NOT NULL")]
		public bool employed
		{
			get
			{
				return this._employed;
			}
			set
			{
				if ((this._employed != value))
				{
					this.OnemployedChanging(value);
					this.SendPropertyChanging();
					this._employed = value;
					this.SendPropertyChanged("employed");
					this.OnemployedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employmentHistory", DbType="Bit NOT NULL")]
		public bool employmentHistory
		{
			get
			{
				return this._employmentHistory;
			}
			set
			{
				if ((this._employmentHistory != value))
				{
					this.OnemploymentHistoryChanging(value);
					this.SendPropertyChanging();
					this._employmentHistory = value;
					this.SendPropertyChanged("employmentHistory");
					this.OnemploymentHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_User", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactInfo")]
	public partial class ContactInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _userName;
		
		private string _contactType;
		
		private string _data;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OncontactTypeChanging(string value);
    partial void OncontactTypeChanged();
    partial void OndataChanging(string value);
    partial void OndataChanged();
    #endregion
		
		public ContactInfo()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactType", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string contactType
		{
			get
			{
				return this._contactType;
			}
			set
			{
				if ((this._contactType != value))
				{
					this.OncontactTypeChanging(value);
					this.SendPropertyChanging();
					this._contactType = value;
					this.SendPropertyChanged("contactType");
					this.OncontactTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_ContactInfo", Storage="_Account", ThisKey="userName", OtherKey="userName", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.ContactInfos.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.ContactInfos.Add(this);
						this._userName = value.userName;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
